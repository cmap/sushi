install.packages("faraway")
library(faraway)
data("sat")
force(sat)
names(sat)
lm(total~expend+salary+ratio+takers, data=sat)
f1 = lm(total~expend+salary+ratio+takers, data=sat)
f1
summary(f1)
anova(f1)
f1$residuals
plot(f1$residuals, f1$fitted.values)
plot(f1$fitted.values, f1$residuals)
qqplot(f1$residuals)
qqplot(f1$residuals, f1$fitted.values)
qqplot(f1$residuals, f1$residuals)
knitr::opts_chunk$set(echo = TRUE)
library(faraway)
sat = data("sat")
m1 = lm(total ~ expend+salary+ratio+takers, data=sat)
library(faraway);data("sat")
m1 = lm(total ~ expend+salary+ratio+takers, data=sat)
setwd("/cmap/obelix/pod/prismSeq")
setwd("/cmap/projects/PRISM_Seq/ajwork")
sessionInfo()
install.packages("R6")
install.packages("R6", force=TRUE)
install.packages("R6", force = TRUE)
installed.packages()
remove.packages(R6)
remove.packages("R6")
install.packages("R6")
install.packages("R6")
library(argparse)
sessionInfo()
library(roller)
sessionInfo()
installed.packages()
.libPaths()
install.packages("argparse")
install.packages("jsonlite")
install.packages("argparse")
.libPaths()
library(roller)
sessionInfo()
R.home()
install.packages(c('ggplot2', 'testthat', 'yaml', 'knitr', 'rmarkdown'))
install.packages("ggplot2")
install.packages("scales")
install.packages("ggplot2", dependencies = TRUE)
install.packages("gert")
list.files()
install.packages("ggplot")
install.packages("ggplot2")
install.packages("colorspace")
install.packages("scales")
install.packages("ggplot2")
install.packages(c(sva', 'snowfall', 'gdata', 'misc3d', 'DT', 'pheatmap', 'viridis','arrow'))
install.packages(c('sva', 'snowfall', 'gdata', 'misc3d', 'DT', 'pheatmap', 'viridis','arrow'))
install.packages("sva")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("sva")
library(roller)
toolify("sig_fastq2counts_tool")
toolify
toolify("sig_fastq2counts_tool")
setwd('/cmap/projects/PRISM_Seq/')
setwd("~/Documents/code/roller")
setwd('/cmap/projects/PRISM_Seq/')
normalized_counts = read.csv("21-PSEQ-WEIS-01/normalized_counts.csv")
filtered_normalized_counts = check_replicate_cor(normalized_counts)
source("src/check_replicate_cor.R")
filtered_normalized_counts = check_replicate_cor(normalized_counts)
source("src/load_libraries.R")
filtered_normalized_counts = check_replicate_cor(normalized_counts)
collapsed_counts = collapse_counts(filtered_normalized_counts)
source("src/collapse_counts.R")
collapsed_counts = collapse_counts(filtered_normalized_counts)
View(filtered_normalized_counts)
View(normalized_counts)
source("src/collapse_counts.R")
collapsed_counts = collapse_counts(filtered_normalized_counts)
View(normalized_counts)
tmp = filtered_normalized_counts %>%
filter(is.na(Name)) %>%
group_by(CCLE_name, DepMap_ID, prism_cell_set, sample_ID, trt_type)
View(tmp)
View(collapsed_counts)
setwd('/cmap/projects/PRISM_Seq/')
setwd(/cmap/projects/PRISM_Seq/pipeline_tools)
setwd("/cmap/projects/PRISM_Seq/pipeline_tools")
setwd("/cmap/tools/jenkins/job_repos/sushi")
filtered_counts = read.csv('/cmap/projects/PRISM_Seq/21-PSEQ-WEIS-01/filtered_counts.csv')
counts_df = with(
filtered_counts[!is.na(filtered_counts$LUA),], #Remove rows where cell line LUA is not known
data.frame(
cid = profile_id,
rid=LUA,
value=n )
)   #Extract matrix columns
View(counts_df)
counts_mat <- counts_df %>%
pivot_wider(
names_from = cid,
id_cols = rid,
values_from = value,
values_fn=as.numeric
)
suppressPackageStartupMessages(library(dplyr))
counts_mat <- counts_df %>%
pivot_wider(
names_from = cid,
id_cols = rid,
values_from = value,
values_fn=as.numeric
)
suppressPackageStartupMessages(library(magrittr))
counts_mat <- counts_df %>%
pivot_wider(
names_from = cid,
id_cols = rid,
values_from = value,
values_fn=as.numeric
)
suppressPackageStartupMessages(library(tidyr))
counts_mat <- counts_df %>%
pivot_wider(
names_from = cid,
id_cols = rid,
values_from = value,
values_fn=as.numeric
)
counts_mat
View(counts_mat)
rownames(counts_mat) <- rids
rids = counts_mat$rid
counts_mat <- as.matrix(counts_mat[-1])
rownames(counts_mat) <- rids
rownames(sample_meta) <- sample_meta$profile_id
rownames(cell_line_meta) <- cell_line_meta$LUA
cell_line_meta = read.csv("/cmap/data/vdb/prismSeq/cell_line_meta.csv")
rownames(sample_meta) <- sample_meta$profile_id
rownames(cell_line_meta) <- cell_line_meta$LUA
col_desc = sample_meta[sample_meta$profile_id %in% colnames(counts_mat),]
sample_meta = read.csv('/cmap/projects/PRISM_Seq/21-PSEQ-WEIS-01//sample_meta.csv')
rownames(sample_meta) <- sample_meta$profile_id
rownames(cell_line_meta) <- cell_line_meta$LUA
col_desc = sample_meta[sample_meta$profile_id %in% colnames(counts_mat),]
row_desc = cell_line_meta[cell_line_meta$LUA %in% rids,]
nrows(row_desc)
nrow(row_desc)
counts_mat
dims(counts_mat)
dim(counts_mat)
nrow(row_desc)
counts_gct <- new("GCT", mat=counts_mat, rdesc=row_desc, cdesc=col_desc)
suppressPackageStartupMessages(library(argparse))
suppressMessages(library(cmapR))
counts_gct <- new("GCT", mat=counts_mat, rdesc=row_desc, cdesc=col_desc)
packageVersion("cmapR")
foo = library()
head(foo, 10)
head(foo, 1)
head(foo, 2)
head(foo, 10)
dim(foo)
foo = library()$results[,1]
foo = library()$results
foo
foo = library()$results[,1]
foo
foo = library()$results[,1:2]
foo
counts_gct <- new("GCT", mat=counts_mat, rid = rownames(counts_ma), cid = colnames(counts_mat), rdesc=row_desc, cdesc=col_desc)
counts_gct <- new("GCT", mat=counts_mat, rid = rownames(counts_mat), cid = colnames(counts_mat), rdesc=row_desc, cdesc=col_desc)
getwd()
setwd(/cmap/projects/PRISM_Seq/)
setwd("/cmap/projects/PRISM_Seq/")
setwd('/cmap/projects/PRISM_Seq/pipeline_tools/')
normalized_counts = read.csv('../test1/normalized_counts.csv')
View(normalized_counts)
treatments = normalized_counts %>%
filter(!(trt_type %in% c("trt_ctrl", "negcon", "day_0")),
is.na(Name)) %>%
dplyr::select(-Name, -log_dose, -n, -log_n, -log_normalized_n)
suppressPackageStartupMessages(library(dplyr))
treatments = normalized_counts %>%
filter(!(trt_type %in% c("trt_ctrl", "negcon", "day_0")),
is.na(Name)) %>%
dplyr::select(-Name, -log_dose, -n, -log_n, -log_normalized_n)
treatments = normalized_counts %>%
filter(!(trt_type %in% c("trt_ctrl", "negcon", "day_0")),
is.na(Name)) %>%
dplyr::select(-Name, -log_dose, -n, -log_n, -normalized_n)
getwd()
lfc_values = read.csv('../test1/l2fc.csv')
View(lfc_values)
View(normalized_counts)
View(treatments)
treatments = normalized_counts %>%
filter(!(trt_type %in% c("trt_ctrl", "negcon", "day_0")),
is.na(Name)) %>%
dplyr::select(-Name, -log_dose, -n, -log_n, -log_normalized_n) %>%
group_by_at(setdiff(names(.), c("normalized_n", "tech_rep"))) %>%
dplyr::summarise(sum_normalized_n = sum(normalized_n))
list.dirs()
read.csv('../test1/normalized_counts.csv')
normalized_counts = read.csv('../test1/normalized_counts.csv')
normalized_counts = read.csv('../test1/normalized_counts.csv')
read.csv('../test1/normalized_counts.csv')
normalized_counts = read.csv('../test1/normalized_counts.csv')
setwd("/cmap/projects/PRISM_Seq/")
ls
list.dirs()
setwd("pipeline_tools/")
normalized_counts = read.csv('../test1/normalized_counts.csv')
treatments = normalized_counts %>%
filter(!(trt_type %in% c("trt_ctrl", "negcon", "day_0")),
is.na(Name)) %>%
dplyr::select(-Name, -log_dose, -n, -log_n, -log_normalized_n) %>%
group_by_at(setdiff(names(.), c("normalized_n", "tech_rep"))) %>%
dplyr::summarise(sum_normalized_n = sum(normalized_n)) %>%
ungroup()
controls = normalized_counts %>%
filter(trt_type %in% c("trt_ctrl", "negcon"),
is.na(Name)) %>%
mutate(control_sample=sample_ID) %>%
dplyr::select(-Name, -log_dose, -n, -log_n, -log_normalized_n) %>%
group_by_at(setdiff(names(.), c("normalized_n", "tech_rep"))) %>%
dplyr::summarise(sum_normalized_n = sum(normalized_n)) %>%
ungroup() %>%
group_by_at(setdiff(names(.), c("sum_normalized_n", "bio_rep"))) %>%
dplyr::summarise(control_median_normalized_n = median(sum_normalized_n),
control_mad_sqrtN = mad(log10(sum_normalized_n))/sqrt(n())) %>%
ungroup() %>%
mutate(control_pass_QC = ifelse(control_mad_sqrtN > 0.5, F, T)) %>%
dplyr::select(CCLE_name, DepMap_ID, prism_cell_set, control_sample, control_median_normalized_n, control_mad_sqrtN, control_pass_QC)
View(controls)
plot(controls$control_median_normalized_n)
hist(controls$control_median_normalized_n, )
hist(controls$control_median_normalized_n, xlim = c(0,4))
hist(controls$control_median_normalized_n, xlim = c(0,4), breaks = 10)
hist(controls$control_median_normalized_n, xlim = c(0,4), breaks = 20)
hist(controls$control_median_normalized_n, xlim = c(0,4), breaks = 30)
hist(controls$control_median_normalized_n, xlim = c(0,4), breaks = 100)
hist(controls$control_median_normalized_n, xlim = c(0,4), breaks = c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 2.0))
hist(controls$control_median_normalized_n, xlim = c(0,4), breaks = c(0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 2.0))
hist(controls$control_median_normalized_n, xlim = c(0,4), breaks = c(0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 2.0, 10))
hist(controls$control_median_normalized_n, xlim = c(0,4), breaks = c(0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 2.0, 100))
lfc_values = read.csv("../test1/l2fc.csv")
View(lfc_values)
colnames(lfc_values)
normalized_counts %>%
#filter(is.na(Name)) %>%
#dplyr::select(-Name, -log_dose, -n, -log_n, -log_normalized_n, -profile_id) %>%
#dplyr::select(-Name, -log_dose, -n, -log_n, -log_normalized_n, -profile_id) %>%
spread(key=tech_rep, value="normalized_n") %>%
normalized_counts %>%
#filter(is.na(Name)) %>%
#dplyr::select(-Name, -log_dose, -n, -log_n, -log_normalized_n, -profile_id) %>%
#dplyr::select(-Name, -log_dose, -n, -log_n, -log_normalized_n, -profile_id) %>%
spread(key=tech_rep, value="normalized_n")
library(tidyr)
normalized_counts %>%
#filter(is.na(Name)) %>%
#dplyr::select(-Name, -log_dose, -n, -log_n, -log_normalized_n, -profile_id) %>%
#dplyr::select(-Name, -log_dose, -n, -log_n, -log_normalized_n, -profile_id) %>%
spread(key=tech_rep, value="normalized_n")
colnames(lfc_values)
c("log_dose") %in% colnames(lfc_values)
c("n") %in% colnames(lfc_values)
c("n", "log_normalized_n") %in% colnames(lfc_values)
c("n", "log_normalized_n", "profile_id") %in% colnames(lfc_values)
c("Name", "n", "log_normalized_n", "profile_id") %in% colnames(lfc_values)
tech_rep_cor = normalized_counts %>%
#filter(is.na(Name)) %>%
#dplyr::select(-Name, -log_dose, -n, -log_n, -log_normalized_n, -profile_id) %>%
#dplyr::select(-Name, -log_dose, -n, -log_n, -log_normalized_n, -profile_id) %>%
spread(key=tech_rep, value="normalized_n") %>%
group_by_at(setdiff(names(.), c("CCLE_name", "prism_cell_set", "DepMap_ID", "1", "2"))) %>%
dplyr::summarise(cor_12 = cor(`1`, `2`, use="complete.obs"))
tech_rep_cor = normalized_counts %>%
spread(key=tech_rep, value="normalized_n") %>%
group_by_at(setdiff(names(.), c("CCLE_name", "prism_cell_set", "DepMap_ID", "1", "2"))) %>%
dplyr::summarise(cor_12 = cor(`1`, `2`, use="complete.obs"))
lfc_values = read.csv('../test1/l2fc.csv')
tech_rep_cor = normalized_counts %>%
spread(key=tech_rep, value="normalized_n") %>%
group_by_at(setdiff(names(.), c("CCLE_name", "prism_cell_set", "DepMap_ID", "1", "2"))) %>%
dplyr::summarise(cor_12 = cor(`1`, `2`, use="complete.obs"))
tech_rep_cor = normalized_counts %>%
spread(key=tech_rep, value="normalized_n")
tech_rep_cor = normalized_counts %>%
spread(key=tech_rep, value="normalized_n")
normalized_counts %>%
spread(key=tech_rep, value="normalized_n")
normalized_counts$tech_rep
head(normalized_counts %>% filter(is.na(tech_rep)))
tmp_a = normalized_counts %>% filter(is.na(tech_rep))
View(tmp_a)
tmp_a = normalized_counts %>% filter(!is.na(tech_rep))
tmp_a = normalized_counts %>% filter(is.na(tech_rep))
tmp_b = normalized_counts %>% filter(!is.na(tech_rep))
View(tmp_b)
unique(normalized_counts$Name)
